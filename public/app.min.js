let keySize, iterations, password, darkMode = localStorage.getItem("darkMode"); const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)"), btn = document.getElementById("btn"), url = "http://localhost:3333/", maxSize = 819200..toString(), sizeFile = getSize(maxSize), socket = io.connect(url, { transport: ["websocket"], secure: !0 }); let currentStream, closeVideo, takeSnap, videoRecorder, closeVideoFromStream, toSendPhoto, toSendVideo, tempData, cameraArr, cameraRotate, cName = "", count = 1, moreThanOne = !1, myRecorder = { objects: { context: null, stream: null, recorder: null } }; function init() { if (1 === count) return cName = document.getElementById("msg").value, socket.emit("new-user", cName), $("#msg").attr("placeholder", "Message"), count += 1, $("#msg").val(""); let e = document.getElementById("msg").value.toString().toLowerCase(); if (2 === count && "" !== e) { if (e.match(/sticker/i)) return socket.emit("chat", { message: e, handle: cName }), $("#msg").val(""); if (e.match(/gif/i)) return socket.emit("chat", { message: e, handle: cName }), $("#msg").val(""); if ("lightmode" === e) return lightm(), $("#msg").val(""); if ("darkmode" === e) return darkm(), $("#msg").val(""); if ("file2upload" === e) return file2Upload(), $("#msg").val(""); if ("cleartext" === e) return $("#send").empty(), $("#msg").val(""); if ("whoami" === e.split(" ").join("")) return alert("secondary", "This is public chat room"); if ("opencamera" === e.split(" ").join("")) return openCamera(), $("#msg").val(""); if ("audiorecorderstart" === e.split(" ").join("")) return audioStart(), $("#msg").val(""); if ("shownew" === e.split(" ").join("")) return socket.emit("showNewfeature"), $("#msg").val(""); var t = encrypt(validator.escape(e), password); socket.emit("chat", { message: t, handle: cName }); $("#msg").val("") } } function encrypt(e, t) { var n = CryptoJS.lib.WordArray.random(16), o = CryptoJS.PBKDF2(t, n, { keySize: keySize / 32, iterations: iterations }), a = CryptoJS.lib.WordArray.random(16), r = CryptoJS.AES.encrypt(e, o, { iv: a, padding: CryptoJS.pad.Pkcs7, mode: CryptoJS.mode.CBC }); return n.toString() + a.toString() + r.toString() } function decrypt(e, t) { var n = CryptoJS.enc.Hex.parse(e.substr(0, 32)), o = CryptoJS.enc.Hex.parse(e.substr(32, 32)), a = e.substring(64), r = CryptoJS.PBKDF2(t, n, { keySize: keySize / 32, iterations: iterations }); return CryptoJS.AES.decrypt(a, r, { iv: o, padding: CryptoJS.pad.Pkcs7, mode: CryptoJS.mode.CBC }) } function firstName(e) { let t = e === cName ? "you" : e; return t.charAt(0).toUpperCase() + t.slice(1) } function makeBlob(e, t) { let n = b64toBlob(e, t); return (window.URL || window.webkitURL).createObjectURL(n) } function lightm() { localStorage.setItem("darkMode", "Light"), darkMode = localStorage.getItem("darkMode"), document.documentElement.setAttribute("data-theme", darkMode), trans() } function darkm() { localStorage.setItem("darkMode", "Dark"), darkMode = localStorage.getItem("darkMode"), document.documentElement.setAttribute("data-theme", darkMode), trans() } function trans() { document.documentElement.classList.add("transition"), window.setTimeout(() => { document.documentElement.classList.remove("transition") }, 1e3) } function file2Upload() { $("#sendfile").click() } function basic_init(e) { e.forEach(e => { const t = document.createElement("li"), n = document.createElement("a"); n.setAttribute("class", "text"), n.innerText = e, t.appendChild(n), document.getElementById("myUL").appendChild(t) }) } function bye() { $("#myUL").fadeOut() } function myFunction() { var e, t, n, o, a; e = document.getElementById("msg"); var r = document.getElementById("myUL"); if ((t = e.value.toUpperCase()).length >= 3) for (r.style.display = "block", r.children[0].style.display = "block", n = document.getElementById("myUL").getElementsByTagName("li"), a = 0; a < n.length; a++)((o = n[a].getElementsByTagName("a")[0]).textContent || o.innerText).toUpperCase().indexOf(t) > -1 ? n[a].style.display = "" : n[a].style.display = "none"; else $("#myUL").fadeOut() } function initStart() { null === myRecorder.objects.context && (myRecorder.objects.context = new (window.AudioContext || window.webkitAudioContext)) } function audioStart() { initStart(); navigator.mediaDevices.getUserMedia({ audio: !0, video: !1 }).then(function (e) { myRecorder.objects.stream = e, myRecorder.objects.recorder = new Recorder(myRecorder.objects.context.createMediaStreamSource(e), { numChannels: 1 }), myRecorder.objects.recorder.record(), AudioRecorderTimer() }).catch(function (e) { }) } function audioStop() { null !== myRecorder.objects.stream && myRecorder.objects.stream.getAudioTracks()[0].stop(), null !== myRecorder.objects.recorder && (myRecorder.objects.recorder.stop(), makeAudioFile(myRecorder)) } function makeAudioFile(e) { var t = document.createElement("div"); t.setAttribute("id", "audio"), $("#audioTemp").append(t); var n = $("#audio"); null !== n && "object" == typeof n && n.length > 0 && e.objects.recorder.exportWAV(function (t) { let n = t.size; Number(maxSize) > n ? (socket.emit("blob", { blob: t, handle: cName, type: t.type, sending: "audio" }), $("#audioTemp").empty(), alert("success", "Audio is sent"), stopMediaTracks(e.objects.stream), myRecorder = { objects: { context: null, stream: null, recorder: null } }) : alert("danger", "Audio recorder less than 5 sec") }) } function AudioRecorderTimer() { let e = 5, t = setInterval(() => { if ((e -= 1) < 0) return clearInterval(t), audioStop(), $("#msg").val(""); $("#msg").val(e) }, 900) } function alert(e, t) { return $("#alert").fadeIn(), $("#alert").html(`<div class="alert alert-${e}" role="alert">${t}</div>`), setTimeout(() => { $("#alert").fadeOut(1e3).empty() }, 5e3) } function showNotificationCount(e) { const t = /^\(\d+\)/; 0 === e || t.test(document.title) ? document.title = document.title.replace(t, 0 === e ? "" : `(${e})`) : document.title = `(${e})` } function getSize(e) { if (7 === e.length) { return `${`${e.charAt(0)}`}mb` } if (8 === e.length) { return `${e.substring(0, 2)}mb` } if (9 === e.length) { return `${e.substring(0, 3)}mb` } if (6 === e.length) { return `${e.substring(0, 3)}kb` } if (5 === e.length) { return `${e.substring(0, 2)}kb` } if (4 === e.length) { return `${e.substring(0, 1)}kb` } } function gotDevices(e) { let t = []; return e.forEach(e => { if ("videoinput" === e.kind) { let n = { label: e.label, deviceId: e.deviceId }; t.push(n) } }), t } function stopMediaTracks(e) { e.getTracks().forEach(e => { e.stop() }) } function openCamera() { const e = document.getElementById("forVideoGrid"), t = document.createElement("video"); t.muted = !0; let n = $("#deviceId").val() || ""; void 0 !== currentStream && stopMediaTracks(currentStream); const o = {}; "" === n ? o.facingMode = "environment" : o.deviceId = { exact: n }; const a = { video: o, audio: !0 }; navigator.mediaDevices.getUserMedia(a).then(n => (currentStream = n, addVideoStream(t, n, e), navigator.mediaDevices.enumerateDevices())).then(gotDevices).catch(e => { console.error(e) }) } function addVideoStream(e, t, n) { e.srcObject = t, e.setAttribute("id", "streamVideo"), e.addEventListener("loadedmetadata", () => { e.play() }); let o = document.createElement("div"); o.innerHTML = '<div class="option_controls">\n  <div class="options" >\n    <i class="fas fa-times" id="closeVideo"></i>\n  </div>\n  <div class="options" id="takeSnap">\n    <i class="far fa-image"></i>\n  </div>\n  <div class="options" id="videoRecorder">\n    <i class="fas fa-video"></i>\n  </div>\n</div>', n.append(e), n.append(o), closeVideo = document.getElementById("closeVideo"), takeSnap = document.getElementById("takeSnap"), videoRecorder = document.getElementById("videoRecorder"), basicCall() } function checkList(e) { return 1 === e.length ? $("#deviceId").val(e[0].deviceId) : 2 === e.length ? moreThanOneCamera(e) : void 0 } function moreThanOneCamera(e) { let t = document.createElement("div"); return t.innerHTML = '\n  <svg fill="currentColor" id="rotate" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512"  xml:space="preserve">\n    <path d="M451.267,144.067h-92.16c-2.56,0-5.12-1.707-5.12-3.413l-9.387-29.867c-3.413-11.093-13.653-17.92-24.747-17.92H191\n      c-11.947,0-21.333,6.827-24.747,17.92l-9.387,29.867c-1.707,1.707-3.413,3.413-5.973,3.413h-92.16\n      C25.453,144.067-1,170.52-1,203.8v153.6c0,33.28,26.453,59.733,59.733,59.733h392.533c33.28,0,59.733-26.453,59.733-59.733V203.8\n      C511,170.52,484.547,144.067,451.267,144.067z M493.933,357.4c0,23.893-18.773,42.667-42.667,42.667H58.733\n      c-23.893,0-42.667-18.773-42.667-42.667V203.8c0-23.893,18.773-42.667,42.667-42.667h92.16c10.24,0,17.92-5.973,22.187-15.36\n      l9.387-29.867c1.707-3.413,5.12-5.973,8.533-5.973h128c4.267,0,7.68,2.56,8.533,5.973l10.24,30.72\n      c3.413,8.533,11.947,14.507,21.333,14.507h92.16c23.893,0,42.667,18.773,42.667,42.667V357.4z"/>\n    <path d="M297.667,333.507c-11.947,10.24-27.307,15.36-42.667,15.36c-37.547,0-68.267-30.72-68.267-68.267v-5.12l2.56,2.56\n      c1.707,1.707,3.413,2.56,5.973,2.56s4.267-0.853,5.973-2.56c3.413-3.413,3.413-8.533,0-11.947l-15.607-15.606\n      c-1.395-2.509-4.034-4.02-7.434-4.02s-6.038,1.511-7.434,4.02l-15.606,15.606c-3.413,3.413-3.413,8.533,0,11.947\n      s8.533,3.413,11.947,0l2.56-2.56v5.12c0,46.933,38.4,85.333,85.333,85.333c19.627,0,38.4-6.827,53.76-19.627\n      c3.413-2.56,3.413-8.533,0.853-11.947S301.08,330.947,297.667,333.507z"/>\n    <path d="M342.893,266.093l-3.419,3.419c-5.855-41.331-41.594-73.392-84.475-73.392c-19.627,0-38.4,6.827-53.76,18.773\n      c-3.413,2.56-3.413,8.533-0.853,11.947c2.56,3.413,8.533,3.413,11.947,0.853c11.947-10.24,26.453-15.36,42.667-15.36\n      c33.013,0,60.738,23.752,66.955,55.009l-1.249-1.249c-3.413-3.413-8.533-3.413-11.947,0s-3.413,8.533,0,11.947l15.607,15.607\n      c1.395,2.509,4.034,4.02,7.433,4.02c3.676,0,6.463-1.764,7.748-4.335l15.292-15.292c3.413-3.413,3.413-8.533,0-11.947\n      S346.307,262.68,342.893,266.093z"/>\n</svg>\n  ', $(".addCameraAdd").append(t), moreThanOne = !0, cameraArr = e, cameraRotate = document.getElementById("rotate"), forCamerafuc() } function closeVideofuc() { return closeVideo = takeSnap = videoRecorder = null, stopMediaTracks(currentStream), $("#forVideoGrid").empty() } function takeSnapfuc() { let e = document.getElementById("streamVideo"); $("#forVideoGrid").empty(); const t = document.createElement("canvas"), n = document.createElement("img"); n.setAttribute("id", "canvasImage"); let o = height = 480; var a = t.getContext("2d"); t.width = o, t.height = height, a.drawImage(e, 0, 0, o, height); var r = t.toDataURL("image/jpeg"); tempData = r; let i = makeDiv("toSendPhoto"); return n.setAttribute("src", r), $("#forVideoGrid").append(n), $("#forVideoGrid").append(i), closeVideoFromStream = document.getElementById("closeVideoFromStream"), toSendPhoto = document.getElementById("toSendPhoto"), basicCallfucTwo() } function videoRecorderfuc() { $("#videoRecorder").addClass("addRecorderColor"); let e = [], t = new MediaRecorder(currentStream); $("#takeSnap").fadeOut(), t.start(), function () { let e = 5, n = setInterval(() => { if ((e -= 1) < 0) return clearInterval(n), function (e) { t.stop(), $("#takeSnap").fadeIn() }(), $("#msg").val(""), $("#videoRecorder").removeClass("addRecorderColor"); $("#msg").val(e) }, 850) }(), t.ondataavailable = function (t) { e.push(t.data) }, t.onstop = (() => { stopMediaTracks(currentStream), $("#forVideoGrid").empty(); let t = new Blob(e, { type: "video/ogg" }); if (Number(maxSize) > t.size) { e = [], tempData = t; let n = document.createElement("video"), o = (window.URL || window.webkitURL).createObjectURL(t); n.src = o; let a = makeDiv("toSendVideo"); return n.setAttribute("class", "recorderVideoStream"), n.setAttribute("controls", "controls"), $("#forVideoGrid").append(n), $("#forVideoGrid").append(a), closeVideoFromStream = document.getElementById("closeVideoFromStream"), toSendVideo = document.getElementById("toSendVideo"), basicCallfucTwo() } alert("danger", `File less then ${sizeFile}`) }) } function toSendPhotofuc() { return closeVideoFromStream = toSendPhoto = void 0, socket.emit("blob", { blob: tempData, handle: cName, type: "image/jpeg", sending: "image" }), alert("success", "Photo is sent"), $("#forVideoGrid").empty(), tempData = "", stopMediaTracks(currentStream) } function toSendVideofuc() { return closeVideoFromStream = toSendVideo = void 0, socket.emit("blob", { blob: tempData, handle: cName, type: tempData.type, sending: "video" }), alert("success", "Video is sent"), $("#forVideoGrid").empty(), tempData = "", stopMediaTracks(currentStream) } function closeVideoFromStreamfuc() { return closeVideoFromStream = toSendPhoto = toSendVideo = void 0, $("#forVideoGrid").empty(), tempData = "" } function basicCall() { void 0 !== closeVideo && closeVideo.addEventListener("click", closeVideofuc), void 0 !== takeSnap && takeSnap.addEventListener("click", takeSnapfuc), void 0 !== videoRecorder && videoRecorder.addEventListener("click", videoRecorderfuc) } function basicCallfucTwo() { void 0 !== toSendVideo && toSendVideo.addEventListener("click", toSendVideofuc), void 0 !== toSendPhoto && toSendPhoto.addEventListener("click", toSendPhotofuc), void 0 !== closeVideoFromStream && closeVideoFromStream.addEventListener("click", closeVideoFromStreamfuc), closeVideo = takeSnap = videoRecorder = void 0 } function makeDiv(e) { return document.createElement("div").innerHTML = `<div class="option_controls">\n            <div class="options" >\n              <i class="fas fa-times" id="closeVideoFromStream"></i>\n            </div>\n            <div class="options" id="${e}">\n            <i class="far fa-paper-plane"></i>\n            </div>\n          </div>` } function forCamerafuc() { void 0 !== cameraRotate && cameraRotate.addEventListener("click", () => { $("#forVideoGrid").empty(), moreThanOne ? (moreThanOne = !1, $("#deviceId").val(cameraArr[0].deviceId), openCamera(), document.getElementById("rotate").style.animation = "mymove 4s forwards") : (moreThanOne = !0, $("#deviceId").val(cameraArr[1].deviceId), openCamera(), document.getElementById("rotate").style.animation = "mymoveback 4s forwards") }) } prefersDarkScheme.matches ? darkm() : lightm(), prefersDarkScheme.addListener(e => prefersDarkScheme.matches ? darkm() : lightm()), "Dark" === darkMode && darkm(), document.getElementById("msg").addEventListener("keyup", myFunction), document.getElementById("msg").addEventListener("change", bye), document.getElementById("msg").addEventListener("keyup", function (e) { 13 !== e.keyCode || document.getElementById("btn").click() }), btn.addEventListener("click", init), socket.on("CheckMe", () => { if (!cName) return location.reload() }), socket.on("basic_need", e => { keySize = e.keySize, iterations = e.iterations, password = e.password, basic_init(e.arr) }), socket.on("chat", function (e) { if (e.message.match(/sticker/i)) return $("#send").append(`<p class="dummy">${firstName(e.handle)} : ${e.url}  <em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></p>`); var t = decrypt(e.message, password); return $("#send").append(`<p class="dummy">${firstName(e.handle)} : ${t.toString(CryptoJS.enc.Utf8).toString()} <em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></p>`) }), socket.on("alert", e => ($("#alert").fadeIn(1500), $("#alert").html(`<div class="alert alert-primary" role="alert">${e.newFeature}</div>`), setTimeout(() => { $("#alert").fadeOut(1e3).empty() }, e.time))), socket.on("blob", e => { if ("audio" === e.sending) { let t = []; t.push(e.blob); let n = (window.URL || window.webkitURL).createObjectURL(new Blob(t, { type: e.type })); return $("#send").append(`<div class="dummy ">&nbsp;<span class="nameText">${firstName(e.handle)}</span>&nbsp; :&nbsp; <audio class="fileAudio" controls autobuffer="autobuffer"><source src="${n}"/></audio>&nbsp;<em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></div>`), t = [] } if ("video" === e.sending) { let t = []; t.push(e.blob); let n = (window.URL || window.webkitURL).createObjectURL(new Blob(t, { type: e.type })); return $("#send").append(`<div class="dummy ">&nbsp;<span class="nameText">${firstName(e.handle)}</span>&nbsp; :&nbsp;<video class="fileVideo" controls autobuffer="autobuffer"><source src="${n}"/></video>&nbsp;<em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></div>`), t = [] } if ("image" === e.sending) { let t = e.blob.substr(23, e.blob.length), n = makeBlob(t, e.type); return $("#send").append(`<div class="dummy">&nbsp;<span class="nameText">${firstName(e.handle)}</span>&nbsp; :&nbsp;<img class="imageClass" src="${n}"/>&nbsp;<a href="${n}" download><i class="fas fa-file-download"></i></a>&nbsp;<em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></div>`), t = "" } }), socket.on("new-user", e => { $("#newUser").append(`<p class="dummy text-info">${e}</p>`), setTimeout(() => { $("#newUser").html(" ") }, 4e3) }), socket.on("file", e => { "image" === e.tag && $("#send").append(`<div class="dummy">&nbsp;<span class="nameText">${firstName(e.handle)}</span>&nbsp; :&nbsp;<img class="imageClass" src="${makeBlob(e.buffer, e.type)}"/>&nbsp;<a href="${makeBlob(e.buffer, e.type)}" download="${e.fileName}"><i class="fas fa-file-download"></i></a>&nbsp;<em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></div>`), "text" === e.tag && $("#send").append(`<div class="dummy addTextColor">&nbsp;<span class="nameText">${firstName(e.handle)}</span>&nbsp; :&nbsp;${e.fileName}&nbsp;<a href="${makeBlob(e.buffer, e.type)}" download="${e.fileName}"><i class="fas fa-file-download"></i></a>&nbsp;<em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></div>`), "audio" === e.tag && $("#send").append(`<div class="dummy ">&nbsp;<span class="nameText">${firstName(e.handle)}</span>&nbsp; :&nbsp; <audio class="fileAudio" controls autobuffer="autobuffer"><source src="${makeBlob(e.buffer, e.type)}"/></audio>&nbsp;<a href="${makeBlob(e.buffer, e.type)}" download="${e.fileName}"><i class="fas fa-file-download"></i></a>&nbsp;<em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></div>`), "video" === e.tag && $("#send").append(`<div class="dummy ">&nbsp;<span class="nameText">${firstName(e.handle)}</span>&nbsp; : &nbsp;<video class="fileVideo" controls autobuffer="autobuffer"><source src="${makeBlob(e.buffer, e.type)}"/></video>&nbsp;<a href="${makeBlob(e.buffer, e.type)}" download="${e.fileName}"><i class="fas fa-file-download"></i></a>&nbsp;<em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></div>`), "application" === e.tag && $("#send").append(`<div class="dummy addTextColor">&nbsp;<span class="nameText">${firstName(e.handle)}</span>&nbsp; :&nbsp;${e.fileName}&nbsp;<a href="${makeBlob(e.buffer, e.type)}" download="${e.fileName}"><i class="fas fa-file-download"></i></a>&nbsp;<em>${(new Date).toLocaleString("en-US", { hour: "numeric", minute: "numeric", hour12: !0 })}</em></div>`) }), socket.on("disconnect", () => { $("#send").append('<p class="dummy text-danger">User has left chat </p>') }), $(function () { socket.on("connect", function () { var e = new Delivery(socket); e.on("delivery.connect", function (e) { $("#sendfile").on("change", function (t) { var n = $("#sendfile")[0].files[0]; if (Number(maxSize) > n.size) { var o = { type: n.type ? n.type : "text/plain", tag: n.type.split("/")[0], extra: n.type.split("/").pop(), handle: cName }; e.send(n, o) } else alert("danger", `File less then ${sizeFile}`); t.preventDefault() }) }), e.on("send.success", function (e) { alert("success", "File was successfully sent") }) }) }), $(document).on("click", ".text", function () { $("#msg").val($(this).text()), $("#myUL").fadeOut() }), $(document).ready(function () { navigator.mediaDevices.enumerateDevices().then(gotDevices).then(e => { checkList(e) }) });